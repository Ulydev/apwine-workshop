/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";

interface AMMInterface extends ethers.utils.Interface {
  functions: {
    "ERC1155_ERC165()": FunctionFragment;
    "addLiquidity(uint256,uint256,uint256[2])": FunctionFragment;
    "ammId()": FunctionFragment;
    "calcInAndSpotGivenOut(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcOutAndSpotGivenIn(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "createLiquidity(uint256,uint256[2])": FunctionFragment;
    "currentPeriodIndex()": FunctionFragment;
    "exitSwapExternAmountOut(uint256,uint256,uint256,uint256)": FunctionFragment;
    "exitSwapPoolAmountIn(uint256,uint256,uint256,uint256)": FunctionFragment;
    "finalize()": FunctionFragment;
    "getAMMState()": FunctionFragment;
    "getExpiredTokensInfo(address,uint256)": FunctionFragment;
    "getFYTAddress()": FunctionFragment;
    "getFutureAddress()": FunctionFragment;
    "getIBTAddress()": FunctionFragment;
    "getLPTokenId(uint256,uint256,uint256)": FunctionFragment;
    "getPTAddress()": FunctionFragment;
    "getPTWeightInPair()": FunctionFragment;
    "getPairIDForToken(address)": FunctionFragment;
    "getPairWithID(uint256)": FunctionFragment;
    "getPoolTokenAddress()": FunctionFragment;
    "getSpotPrice(uint256,uint256,uint256)": FunctionFragment;
    "getTotalSupplyWithTokenId(uint256)": FunctionFragment;
    "getUnderlyingOfIBTAddress()": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(uint64,address,address,address,address,address)": FunctionFragment;
    "joinSwapExternAmountIn(uint256,uint256,uint256,uint256)": FunctionFragment;
    "joinSwapPoolAmountOut(uint256,uint256,uint256,uint256)": FunctionFragment;
    "lastBlockYieldRecorded()": FunctionFragment;
    "lastYieldRecorded()": FunctionFragment;
    "removeLiquidity(uint256,uint256,uint256[2])": FunctionFragment;
    "rescueFunds(address,address)": FunctionFragment;
    "setSwappingFees(uint256)": FunctionFragment;
    "swapExactAmountIn(uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "swapExactAmountOut(uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "swapFee()": FunctionFragment;
    "switchPeriod()": FunctionFragment;
    "togglePauseAmm()": FunctionFragment;
    "withdrawExpiredToken(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ERC1155_ERC165",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(functionFragment: "ammId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calcInAndSpotGivenOut",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcOutAndSpotGivenIn",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createLiquidity",
    values: [BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriodIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exitSwapExternAmountOut",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitSwapPoolAmountIn",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAMMState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExpiredTokensInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFYTAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFutureAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIBTAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLPTokenId",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPTAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPTWeightInPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPairIDForToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairWithID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupplyWithTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingOfIBTAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "joinSwapExternAmountIn",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinSwapPoolAmountOut",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastBlockYieldRecorded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastYieldRecorded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueFunds",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwappingFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAmountIn",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAmountOut",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "swapFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "switchPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "togglePauseAmm",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawExpiredToken",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC1155_ERC165",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ammId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcInAndSpotGivenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcOutAndSpotGivenIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriodIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitSwapExternAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitSwapPoolAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAMMState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpiredTokensInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFYTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFutureAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIBTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLPTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPTWeightInPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairIDForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairWithID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupplyWithTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingOfIBTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinSwapExternAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinSwapPoolAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastBlockYieldRecorded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastYieldRecorded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwappingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "switchPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "togglePauseAmm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExpiredToken",
    data: BytesLike
  ): Result;

  events: {
    "AMMStateChanged(uint8)": EventFragment;
    "ExpiredTokensWithdrawn(address,uint256)": EventFragment;
    "LiquidityCreated(address,uint256)": EventFragment;
    "LiquidityDecreased(address,uint256,uint256,uint256)": EventFragment;
    "LiquidityIncreased(address,uint256,uint256,uint256)": EventFragment;
    "PairCreated(uint256,address)": EventFragment;
    "PeriodSwitched(uint256)": EventFragment;
    "PoolExited(address,uint256,uint256)": EventFragment;
    "PoolJoined(address,uint256,uint256)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "Swapped(address,uint256,uint256,uint256,uint256,uint256,address)": EventFragment;
    "SwappingFeeSet(uint256)": EventFragment;
    "WeightUpdated(address,uint256[2])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AMMStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpiredTokensWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeriodSwitched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolExited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolJoined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwappingFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WeightUpdated"): EventFragment;
}

export class AMM extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AMMInterface;

  functions: {
    ERC1155_ERC165(overrides?: CallOverrides): Promise<[string]>;

    "ERC1155_ERC165()"(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(
      _pairID: BigNumberish,
      _poolAmountOut: BigNumberish,
      _maxAmountsIn: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addLiquidity(uint256,uint256,uint256[2])"(
      _pairID: BigNumberish,
      _poolAmountOut: BigNumberish,
      _maxAmountsIn: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ammId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ammId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcInAndSpotGivenOut(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _maxAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountIn: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    "calcInAndSpotGivenOut(uint256,uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _maxAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountIn: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    calcOutAndSpotGivenIn(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountOut: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    "calcOutAndSpotGivenIn(uint256,uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountOut: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    createLiquidity(
      _pairID: BigNumberish,
      _tokenAmounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createLiquidity(uint256,uint256[2])"(
      _pairID: BigNumberish,
      _tokenAmounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentPeriodIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentPeriodIndex()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    exitSwapExternAmountOut(
      _pairID: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      _maxPoolAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exitSwapExternAmountOut(uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      _maxPoolAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitSwapPoolAmountIn(
      _pairID: BigNumberish,
      _tokenOut: BigNumberish,
      _poolAmountIn: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exitSwapPoolAmountIn(uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenOut: BigNumberish,
      _poolAmountIn: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "finalize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAMMState(overrides?: CallOverrides): Promise<[number]>;

    "getAMMState()"(overrides?: CallOverrides): Promise<[number]>;

    getExpiredTokensInfo(
      _user: string,
      _lpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "getExpiredTokensInfo(address,uint256)"(
      _user: string,
      _lpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getFYTAddress(overrides?: CallOverrides): Promise<[string]>;

    "getFYTAddress()"(overrides?: CallOverrides): Promise<[string]>;

    getFutureAddress(overrides?: CallOverrides): Promise<[string]>;

    "getFutureAddress()"(overrides?: CallOverrides): Promise<[string]>;

    getIBTAddress(overrides?: CallOverrides): Promise<[string]>;

    "getIBTAddress()"(overrides?: CallOverrides): Promise<[string]>;

    getLPTokenId(
      _ammId: BigNumberish,
      _periodIndex: BigNumberish,
      _pairID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLPTokenId(uint256,uint256,uint256)"(
      _ammId: BigNumberish,
      _periodIndex: BigNumberish,
      _pairID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPTAddress(overrides?: CallOverrides): Promise<[string]>;

    "getPTAddress()"(overrides?: CallOverrides): Promise<[string]>;

    getPTWeightInPair(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getPTWeightInPair()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPairIDForToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPairIDForToken(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPairWithID(
      _pairID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, [BigNumber, BigNumber], [BigNumber, BigNumber], boolean] & {
          tokenAddress: string;
          weights: [BigNumber, BigNumber];
          balances: [BigNumber, BigNumber];
          liquidityIsInitialized: boolean;
        }
      ]
    >;

    "getPairWithID(uint256)"(
      _pairID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, [BigNumber, BigNumber], [BigNumber, BigNumber], boolean] & {
          tokenAddress: string;
          weights: [BigNumber, BigNumber];
          balances: [BigNumber, BigNumber];
          liquidityIsInitialized: boolean;
        }
      ]
    >;

    getPoolTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    "getPoolTokenAddress()"(overrides?: CallOverrides): Promise<[string]>;

    getSpotPrice(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getSpotPrice(uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalSupplyWithTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalSupplyWithTokenId(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnderlyingOfIBTAddress(overrides?: CallOverrides): Promise<[string]>;

    "getUnderlyingOfIBTAddress()"(overrides?: CallOverrides): Promise<[string]>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _ammId: BigNumberish,
      _underlyingOfIBTAddress: string,
      _futureVault: string,
      _poolTokens: string,
      _admin: string,
      _feesRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(uint64,address,address,address,address,address)"(
      _ammId: BigNumberish,
      _underlyingOfIBTAddress: string,
      _futureVault: string,
      _poolTokens: string,
      _admin: string,
      _feesRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    joinSwapExternAmountIn(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _minPoolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "joinSwapExternAmountIn(uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _minPoolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    joinSwapPoolAmountOut(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _poolAmountOut: BigNumberish,
      _maxAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "joinSwapPoolAmountOut(uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _poolAmountOut: BigNumberish,
      _maxAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastBlockYieldRecorded(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastBlockYieldRecorded()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastYieldRecorded(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastYieldRecorded()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeLiquidity(
      _pairID: BigNumberish,
      _poolAmountIn: BigNumberish,
      _minAmountsOut: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeLiquidity(uint256,uint256,uint256[2])"(
      _pairID: BigNumberish,
      _poolAmountIn: BigNumberish,
      _minAmountsOut: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueFunds(
      _token: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rescueFunds(address,address)"(
      _token: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwappingFees(
      _swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSwappingFees(uint256)"(
      _swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactAmountIn(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _minAmountOut: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapExactAmountIn(uint256,uint256,uint256,uint256,uint256,address)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _minAmountOut: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactAmountOut(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _maxAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapExactAmountOut(uint256,uint256,uint256,uint256,uint256,address)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _maxAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "swapFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    switchPeriod(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "switchPeriod()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    togglePauseAmm(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "togglePauseAmm()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawExpiredToken(
      _user: string,
      _lpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawExpiredToken(address,uint256)"(
      _user: string,
      _lpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ERC1155_ERC165(overrides?: CallOverrides): Promise<string>;

  "ERC1155_ERC165()"(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    _pairID: BigNumberish,
    _poolAmountOut: BigNumberish,
    _maxAmountsIn: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addLiquidity(uint256,uint256,uint256[2])"(
    _pairID: BigNumberish,
    _poolAmountOut: BigNumberish,
    _maxAmountsIn: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ammId(overrides?: CallOverrides): Promise<BigNumber>;

  "ammId()"(overrides?: CallOverrides): Promise<BigNumber>;

  calcInAndSpotGivenOut(
    _pairID: BigNumberish,
    _tokenIn: BigNumberish,
    _maxAmountIn: BigNumberish,
    _tokenOut: BigNumberish,
    _tokenAmountOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      tokenAmountIn: BigNumber;
      spotPriceAfter: BigNumber;
    }
  >;

  "calcInAndSpotGivenOut(uint256,uint256,uint256,uint256,uint256)"(
    _pairID: BigNumberish,
    _tokenIn: BigNumberish,
    _maxAmountIn: BigNumberish,
    _tokenOut: BigNumberish,
    _tokenAmountOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      tokenAmountIn: BigNumber;
      spotPriceAfter: BigNumber;
    }
  >;

  calcOutAndSpotGivenIn(
    _pairID: BigNumberish,
    _tokenIn: BigNumberish,
    _tokenAmountIn: BigNumberish,
    _tokenOut: BigNumberish,
    _minAmountOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      tokenAmountOut: BigNumber;
      spotPriceAfter: BigNumber;
    }
  >;

  "calcOutAndSpotGivenIn(uint256,uint256,uint256,uint256,uint256)"(
    _pairID: BigNumberish,
    _tokenIn: BigNumberish,
    _tokenAmountIn: BigNumberish,
    _tokenOut: BigNumberish,
    _minAmountOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      tokenAmountOut: BigNumber;
      spotPriceAfter: BigNumber;
    }
  >;

  createLiquidity(
    _pairID: BigNumberish,
    _tokenAmounts: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createLiquidity(uint256,uint256[2])"(
    _pairID: BigNumberish,
    _tokenAmounts: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentPeriodIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "currentPeriodIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  exitSwapExternAmountOut(
    _pairID: BigNumberish,
    _tokenOut: BigNumberish,
    _tokenAmountOut: BigNumberish,
    _maxPoolAmountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exitSwapExternAmountOut(uint256,uint256,uint256,uint256)"(
    _pairID: BigNumberish,
    _tokenOut: BigNumberish,
    _tokenAmountOut: BigNumberish,
    _maxPoolAmountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitSwapPoolAmountIn(
    _pairID: BigNumberish,
    _tokenOut: BigNumberish,
    _poolAmountIn: BigNumberish,
    _minAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exitSwapPoolAmountIn(uint256,uint256,uint256,uint256)"(
    _pairID: BigNumberish,
    _tokenOut: BigNumberish,
    _poolAmountIn: BigNumberish,
    _minAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "finalize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAMMState(overrides?: CallOverrides): Promise<number>;

  "getAMMState()"(overrides?: CallOverrides): Promise<number>;

  getExpiredTokensInfo(
    _user: string,
    _lpTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "getExpiredTokensInfo(address,uint256)"(
    _user: string,
    _lpTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getFYTAddress(overrides?: CallOverrides): Promise<string>;

  "getFYTAddress()"(overrides?: CallOverrides): Promise<string>;

  getFutureAddress(overrides?: CallOverrides): Promise<string>;

  "getFutureAddress()"(overrides?: CallOverrides): Promise<string>;

  getIBTAddress(overrides?: CallOverrides): Promise<string>;

  "getIBTAddress()"(overrides?: CallOverrides): Promise<string>;

  getLPTokenId(
    _ammId: BigNumberish,
    _periodIndex: BigNumberish,
    _pairID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLPTokenId(uint256,uint256,uint256)"(
    _ammId: BigNumberish,
    _periodIndex: BigNumberish,
    _pairID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPTAddress(overrides?: CallOverrides): Promise<string>;

  "getPTAddress()"(overrides?: CallOverrides): Promise<string>;

  getPTWeightInPair(overrides?: CallOverrides): Promise<BigNumber>;

  "getPTWeightInPair()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPairIDForToken(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPairIDForToken(address)"(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPairWithID(
    _pairID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, [BigNumber, BigNumber], [BigNumber, BigNumber], boolean] & {
      tokenAddress: string;
      weights: [BigNumber, BigNumber];
      balances: [BigNumber, BigNumber];
      liquidityIsInitialized: boolean;
    }
  >;

  "getPairWithID(uint256)"(
    _pairID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, [BigNumber, BigNumber], [BigNumber, BigNumber], boolean] & {
      tokenAddress: string;
      weights: [BigNumber, BigNumber];
      balances: [BigNumber, BigNumber];
      liquidityIsInitialized: boolean;
    }
  >;

  getPoolTokenAddress(overrides?: CallOverrides): Promise<string>;

  "getPoolTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  getSpotPrice(
    _pairID: BigNumberish,
    _tokenIn: BigNumberish,
    _tokenOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSpotPrice(uint256,uint256,uint256)"(
    _pairID: BigNumberish,
    _tokenIn: BigNumberish,
    _tokenOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalSupplyWithTokenId(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalSupplyWithTokenId(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnderlyingOfIBTAddress(overrides?: CallOverrides): Promise<string>;

  "getUnderlyingOfIBTAddress()"(overrides?: CallOverrides): Promise<string>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _ammId: BigNumberish,
    _underlyingOfIBTAddress: string,
    _futureVault: string,
    _poolTokens: string,
    _admin: string,
    _feesRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(uint64,address,address,address,address,address)"(
    _ammId: BigNumberish,
    _underlyingOfIBTAddress: string,
    _futureVault: string,
    _poolTokens: string,
    _admin: string,
    _feesRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  joinSwapExternAmountIn(
    _pairID: BigNumberish,
    _tokenIn: BigNumberish,
    _tokenAmountIn: BigNumberish,
    _minPoolAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "joinSwapExternAmountIn(uint256,uint256,uint256,uint256)"(
    _pairID: BigNumberish,
    _tokenIn: BigNumberish,
    _tokenAmountIn: BigNumberish,
    _minPoolAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  joinSwapPoolAmountOut(
    _pairID: BigNumberish,
    _tokenIn: BigNumberish,
    _poolAmountOut: BigNumberish,
    _maxAmountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "joinSwapPoolAmountOut(uint256,uint256,uint256,uint256)"(
    _pairID: BigNumberish,
    _tokenIn: BigNumberish,
    _poolAmountOut: BigNumberish,
    _maxAmountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastBlockYieldRecorded(overrides?: CallOverrides): Promise<BigNumber>;

  "lastBlockYieldRecorded()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastYieldRecorded(overrides?: CallOverrides): Promise<BigNumber>;

  "lastYieldRecorded()"(overrides?: CallOverrides): Promise<BigNumber>;

  removeLiquidity(
    _pairID: BigNumberish,
    _poolAmountIn: BigNumberish,
    _minAmountsOut: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeLiquidity(uint256,uint256,uint256[2])"(
    _pairID: BigNumberish,
    _poolAmountIn: BigNumberish,
    _minAmountsOut: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueFunds(
    _token: string,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rescueFunds(address,address)"(
    _token: string,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwappingFees(
    _swapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSwappingFees(uint256)"(
    _swapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactAmountIn(
    _pairID: BigNumberish,
    _tokenIn: BigNumberish,
    _tokenAmountIn: BigNumberish,
    _tokenOut: BigNumberish,
    _minAmountOut: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapExactAmountIn(uint256,uint256,uint256,uint256,uint256,address)"(
    _pairID: BigNumberish,
    _tokenIn: BigNumberish,
    _tokenAmountIn: BigNumberish,
    _tokenOut: BigNumberish,
    _minAmountOut: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactAmountOut(
    _pairID: BigNumberish,
    _tokenIn: BigNumberish,
    _maxAmountIn: BigNumberish,
    _tokenOut: BigNumberish,
    _tokenAmountOut: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapExactAmountOut(uint256,uint256,uint256,uint256,uint256,address)"(
    _pairID: BigNumberish,
    _tokenIn: BigNumberish,
    _maxAmountIn: BigNumberish,
    _tokenOut: BigNumberish,
    _tokenAmountOut: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFee(overrides?: CallOverrides): Promise<BigNumber>;

  "swapFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  switchPeriod(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "switchPeriod()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  togglePauseAmm(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "togglePauseAmm()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawExpiredToken(
    _user: string,
    _lpTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawExpiredToken(address,uint256)"(
    _user: string,
    _lpTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ERC1155_ERC165(overrides?: CallOverrides): Promise<string>;

    "ERC1155_ERC165()"(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      _pairID: BigNumberish,
      _poolAmountOut: BigNumberish,
      _maxAmountsIn: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidity(uint256,uint256,uint256[2])"(
      _pairID: BigNumberish,
      _poolAmountOut: BigNumberish,
      _maxAmountsIn: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    ammId(overrides?: CallOverrides): Promise<BigNumber>;

    "ammId()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcInAndSpotGivenOut(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _maxAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountIn: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    "calcInAndSpotGivenOut(uint256,uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _maxAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountIn: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    calcOutAndSpotGivenIn(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountOut: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    "calcOutAndSpotGivenIn(uint256,uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountOut: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    createLiquidity(
      _pairID: BigNumberish,
      _tokenAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "createLiquidity(uint256,uint256[2])"(
      _pairID: BigNumberish,
      _tokenAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    currentPeriodIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriodIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    exitSwapExternAmountOut(
      _pairID: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      _maxPoolAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exitSwapExternAmountOut(uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      _maxPoolAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitSwapPoolAmountIn(
      _pairID: BigNumberish,
      _tokenOut: BigNumberish,
      _poolAmountIn: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exitSwapPoolAmountIn(uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenOut: BigNumberish,
      _poolAmountIn: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalize(overrides?: CallOverrides): Promise<void>;

    "finalize()"(overrides?: CallOverrides): Promise<void>;

    getAMMState(overrides?: CallOverrides): Promise<number>;

    "getAMMState()"(overrides?: CallOverrides): Promise<number>;

    getExpiredTokensInfo(
      _user: string,
      _lpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "getExpiredTokensInfo(address,uint256)"(
      _user: string,
      _lpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getFYTAddress(overrides?: CallOverrides): Promise<string>;

    "getFYTAddress()"(overrides?: CallOverrides): Promise<string>;

    getFutureAddress(overrides?: CallOverrides): Promise<string>;

    "getFutureAddress()"(overrides?: CallOverrides): Promise<string>;

    getIBTAddress(overrides?: CallOverrides): Promise<string>;

    "getIBTAddress()"(overrides?: CallOverrides): Promise<string>;

    getLPTokenId(
      _ammId: BigNumberish,
      _periodIndex: BigNumberish,
      _pairID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLPTokenId(uint256,uint256,uint256)"(
      _ammId: BigNumberish,
      _periodIndex: BigNumberish,
      _pairID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPTAddress(overrides?: CallOverrides): Promise<string>;

    "getPTAddress()"(overrides?: CallOverrides): Promise<string>;

    getPTWeightInPair(overrides?: CallOverrides): Promise<BigNumber>;

    "getPTWeightInPair()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPairIDForToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPairIDForToken(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairWithID(
      _pairID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, [BigNumber, BigNumber], [BigNumber, BigNumber], boolean] & {
        tokenAddress: string;
        weights: [BigNumber, BigNumber];
        balances: [BigNumber, BigNumber];
        liquidityIsInitialized: boolean;
      }
    >;

    "getPairWithID(uint256)"(
      _pairID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, [BigNumber, BigNumber], [BigNumber, BigNumber], boolean] & {
        tokenAddress: string;
        weights: [BigNumber, BigNumber];
        balances: [BigNumber, BigNumber];
        liquidityIsInitialized: boolean;
      }
    >;

    getPoolTokenAddress(overrides?: CallOverrides): Promise<string>;

    "getPoolTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    getSpotPrice(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSpotPrice(uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSupplyWithTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalSupplyWithTokenId(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingOfIBTAddress(overrides?: CallOverrides): Promise<string>;

    "getUnderlyingOfIBTAddress()"(overrides?: CallOverrides): Promise<string>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _ammId: BigNumberish,
      _underlyingOfIBTAddress: string,
      _futureVault: string,
      _poolTokens: string,
      _admin: string,
      _feesRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint64,address,address,address,address,address)"(
      _ammId: BigNumberish,
      _underlyingOfIBTAddress: string,
      _futureVault: string,
      _poolTokens: string,
      _admin: string,
      _feesRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    joinSwapExternAmountIn(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _minPoolAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "joinSwapExternAmountIn(uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _minPoolAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinSwapPoolAmountOut(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _poolAmountOut: BigNumberish,
      _maxAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "joinSwapPoolAmountOut(uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _poolAmountOut: BigNumberish,
      _maxAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastBlockYieldRecorded(overrides?: CallOverrides): Promise<BigNumber>;

    "lastBlockYieldRecorded()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastYieldRecorded(overrides?: CallOverrides): Promise<BigNumber>;

    "lastYieldRecorded()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      _pairID: BigNumberish,
      _poolAmountIn: BigNumberish,
      _minAmountsOut: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidity(uint256,uint256,uint256[2])"(
      _pairID: BigNumberish,
      _poolAmountIn: BigNumberish,
      _minAmountsOut: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    rescueFunds(
      _token: string,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "rescueFunds(address,address)"(
      _token: string,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwappingFees(
      _swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSwappingFees(uint256)"(
      _swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactAmountIn(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _minAmountOut: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountOut: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    "swapExactAmountIn(uint256,uint256,uint256,uint256,uint256,address)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _minAmountOut: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountOut: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    swapExactAmountOut(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _maxAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountIn: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    "swapExactAmountOut(uint256,uint256,uint256,uint256,uint256,address)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _maxAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountIn: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    "swapFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    switchPeriod(overrides?: CallOverrides): Promise<void>;

    "switchPeriod()"(overrides?: CallOverrides): Promise<void>;

    togglePauseAmm(overrides?: CallOverrides): Promise<void>;

    "togglePauseAmm()"(overrides?: CallOverrides): Promise<void>;

    withdrawExpiredToken(
      _user: string,
      _lpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawExpiredToken(address,uint256)"(
      _user: string,
      _lpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AMMStateChanged(
      _newState: null
    ): TypedEventFilter<[number], { _newState: number }>;

    ExpiredTokensWithdrawn(
      _user: null,
      _amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _user: string; _amount: BigNumber }
    >;

    LiquidityCreated(
      _user: null,
      _pairID: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _user: string; _pairID: BigNumber }
    >;

    LiquidityDecreased(
      _to: null,
      _pairID: null,
      _tokenID: null,
      _amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _to: string;
        _pairID: BigNumber;
        _tokenID: BigNumber;
        _amount: BigNumber;
      }
    >;

    LiquidityIncreased(
      _from: null,
      _pairID: null,
      _tokenID: null,
      _amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _from: string;
        _pairID: BigNumber;
        _tokenID: BigNumber;
        _amount: BigNumber;
      }
    >;

    PairCreated(
      _pairID: BigNumberish | null,
      _token: null
    ): TypedEventFilter<
      [BigNumber, string],
      { _pairID: BigNumber; _token: string }
    >;

    PeriodSwitched(
      _newPeriodIndex: null
    ): TypedEventFilter<[BigNumber], { _newPeriodIndex: BigNumber }>;

    PoolExited(
      _user: null,
      _pairID: null,
      _poolTokenAmount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _user: string; _pairID: BigNumber; _poolTokenAmount: BigNumber }
    >;

    PoolJoined(
      _user: null,
      _pairID: null,
      _poolTokenAmount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _user: string; _pairID: BigNumber; _poolTokenAmount: BigNumber }
    >;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    Swapped(
      _user: null,
      _pairID: null,
      _tokenInID: null,
      _tokenOutID: null,
      _tokenAmountIn: null,
      _tokenAmountOut: null,
      _to: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        _user: string;
        _pairID: BigNumber;
        _tokenInID: BigNumber;
        _tokenOutID: BigNumber;
        _tokenAmountIn: BigNumber;
        _tokenAmountOut: BigNumber;
        _to: string;
      }
    >;

    SwappingFeeSet(
      _swapFee: null
    ): TypedEventFilter<[BigNumber], { _swapFee: BigNumber }>;

    WeightUpdated(
      _token: null,
      _newWeights: null
    ): TypedEventFilter<
      [string, [BigNumber, BigNumber]],
      { _token: string; _newWeights: [BigNumber, BigNumber] }
    >;
  };

  estimateGas: {
    ERC1155_ERC165(overrides?: CallOverrides): Promise<BigNumber>;

    "ERC1155_ERC165()"(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      _pairID: BigNumberish,
      _poolAmountOut: BigNumberish,
      _maxAmountsIn: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addLiquidity(uint256,uint256,uint256[2])"(
      _pairID: BigNumberish,
      _poolAmountOut: BigNumberish,
      _maxAmountsIn: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ammId(overrides?: CallOverrides): Promise<BigNumber>;

    "ammId()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcInAndSpotGivenOut(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _maxAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcInAndSpotGivenOut(uint256,uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _maxAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutAndSpotGivenIn(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcOutAndSpotGivenIn(uint256,uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLiquidity(
      _pairID: BigNumberish,
      _tokenAmounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createLiquidity(uint256,uint256[2])"(
      _pairID: BigNumberish,
      _tokenAmounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentPeriodIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriodIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    exitSwapExternAmountOut(
      _pairID: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      _maxPoolAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exitSwapExternAmountOut(uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      _maxPoolAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitSwapPoolAmountIn(
      _pairID: BigNumberish,
      _tokenOut: BigNumberish,
      _poolAmountIn: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exitSwapPoolAmountIn(uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenOut: BigNumberish,
      _poolAmountIn: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "finalize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAMMState(overrides?: CallOverrides): Promise<BigNumber>;

    "getAMMState()"(overrides?: CallOverrides): Promise<BigNumber>;

    getExpiredTokensInfo(
      _user: string,
      _lpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExpiredTokensInfo(address,uint256)"(
      _user: string,
      _lpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFYTAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getFYTAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFutureAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getFutureAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getIBTAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getIBTAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLPTokenId(
      _ammId: BigNumberish,
      _periodIndex: BigNumberish,
      _pairID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLPTokenId(uint256,uint256,uint256)"(
      _ammId: BigNumberish,
      _periodIndex: BigNumberish,
      _pairID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPTAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getPTAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPTWeightInPair(overrides?: CallOverrides): Promise<BigNumber>;

    "getPTWeightInPair()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPairIDForToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPairIDForToken(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairWithID(
      _pairID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPairWithID(uint256)"(
      _pairID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSpotPrice(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSpotPrice(uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSupplyWithTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalSupplyWithTokenId(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingOfIBTAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getUnderlyingOfIBTAddress()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _ammId: BigNumberish,
      _underlyingOfIBTAddress: string,
      _futureVault: string,
      _poolTokens: string,
      _admin: string,
      _feesRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(uint64,address,address,address,address,address)"(
      _ammId: BigNumberish,
      _underlyingOfIBTAddress: string,
      _futureVault: string,
      _poolTokens: string,
      _admin: string,
      _feesRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    joinSwapExternAmountIn(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _minPoolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "joinSwapExternAmountIn(uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _minPoolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    joinSwapPoolAmountOut(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _poolAmountOut: BigNumberish,
      _maxAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "joinSwapPoolAmountOut(uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _poolAmountOut: BigNumberish,
      _maxAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastBlockYieldRecorded(overrides?: CallOverrides): Promise<BigNumber>;

    "lastBlockYieldRecorded()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastYieldRecorded(overrides?: CallOverrides): Promise<BigNumber>;

    "lastYieldRecorded()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      _pairID: BigNumberish,
      _poolAmountIn: BigNumberish,
      _minAmountsOut: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeLiquidity(uint256,uint256,uint256[2])"(
      _pairID: BigNumberish,
      _poolAmountIn: BigNumberish,
      _minAmountsOut: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueFunds(
      _token: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rescueFunds(address,address)"(
      _token: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwappingFees(
      _swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSwappingFees(uint256)"(
      _swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactAmountIn(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _minAmountOut: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapExactAmountIn(uint256,uint256,uint256,uint256,uint256,address)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _minAmountOut: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactAmountOut(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _maxAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapExactAmountOut(uint256,uint256,uint256,uint256,uint256,address)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _maxAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    "swapFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    switchPeriod(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "switchPeriod()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    togglePauseAmm(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "togglePauseAmm()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawExpiredToken(
      _user: string,
      _lpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawExpiredToken(address,uint256)"(
      _user: string,
      _lpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC1155_ERC165(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ERC1155_ERC165()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      _pairID: BigNumberish,
      _poolAmountOut: BigNumberish,
      _maxAmountsIn: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addLiquidity(uint256,uint256,uint256[2])"(
      _pairID: BigNumberish,
      _poolAmountOut: BigNumberish,
      _maxAmountsIn: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ammId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ammId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcInAndSpotGivenOut(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _maxAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcInAndSpotGivenOut(uint256,uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _maxAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcOutAndSpotGivenIn(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcOutAndSpotGivenIn(uint256,uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createLiquidity(
      _pairID: BigNumberish,
      _tokenAmounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createLiquidity(uint256,uint256[2])"(
      _pairID: BigNumberish,
      _tokenAmounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentPeriodIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentPeriodIndex()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exitSwapExternAmountOut(
      _pairID: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      _maxPoolAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exitSwapExternAmountOut(uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      _maxPoolAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitSwapPoolAmountIn(
      _pairID: BigNumberish,
      _tokenOut: BigNumberish,
      _poolAmountIn: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exitSwapPoolAmountIn(uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenOut: BigNumberish,
      _poolAmountIn: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "finalize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAMMState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAMMState()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExpiredTokensInfo(
      _user: string,
      _lpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExpiredTokensInfo(address,uint256)"(
      _user: string,
      _lpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFYTAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFYTAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFutureAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFutureAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIBTAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getIBTAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLPTokenId(
      _ammId: BigNumberish,
      _periodIndex: BigNumberish,
      _pairID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLPTokenId(uint256,uint256,uint256)"(
      _ammId: BigNumberish,
      _periodIndex: BigNumberish,
      _pairID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPTAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPTAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPTWeightInPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPTWeightInPair()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairIDForToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPairIDForToken(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairWithID(
      _pairID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPairWithID(uint256)"(
      _pairID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotPrice(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSpotPrice(uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSupplyWithTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalSupplyWithTokenId(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlyingOfIBTAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUnderlyingOfIBTAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _ammId: BigNumberish,
      _underlyingOfIBTAddress: string,
      _futureVault: string,
      _poolTokens: string,
      _admin: string,
      _feesRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(uint64,address,address,address,address,address)"(
      _ammId: BigNumberish,
      _underlyingOfIBTAddress: string,
      _futureVault: string,
      _poolTokens: string,
      _admin: string,
      _feesRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    joinSwapExternAmountIn(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _minPoolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "joinSwapExternAmountIn(uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _minPoolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    joinSwapPoolAmountOut(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _poolAmountOut: BigNumberish,
      _maxAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "joinSwapPoolAmountOut(uint256,uint256,uint256,uint256)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _poolAmountOut: BigNumberish,
      _maxAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastBlockYieldRecorded(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastBlockYieldRecorded()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastYieldRecorded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastYieldRecorded()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _pairID: BigNumberish,
      _poolAmountIn: BigNumberish,
      _minAmountsOut: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(uint256,uint256,uint256[2])"(
      _pairID: BigNumberish,
      _poolAmountIn: BigNumberish,
      _minAmountsOut: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueFunds(
      _token: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rescueFunds(address,address)"(
      _token: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwappingFees(
      _swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSwappingFees(uint256)"(
      _swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactAmountIn(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _minAmountOut: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactAmountIn(uint256,uint256,uint256,uint256,uint256,address)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _tokenAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _minAmountOut: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactAmountOut(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _maxAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactAmountOut(uint256,uint256,uint256,uint256,uint256,address)"(
      _pairID: BigNumberish,
      _tokenIn: BigNumberish,
      _maxAmountIn: BigNumberish,
      _tokenOut: BigNumberish,
      _tokenAmountOut: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "swapFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    switchPeriod(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "switchPeriod()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    togglePauseAmm(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "togglePauseAmm()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawExpiredToken(
      _user: string,
      _lpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawExpiredToken(address,uint256)"(
      _user: string,
      _lpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
